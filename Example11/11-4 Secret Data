### 11.4 중요 정보 취급
스마트 계약은 안에 저장되 ㄴ상태정보를 이용하여 다른 사람과 정보를 주고받는 용도로 이용 가능
그러나 이러한 정보를 다룰 때는 주의가 필요함

### 예제 코드
> Secret.sol
```c
pragma solidity ^0.4.11;
contract Secret {
	string private secret;	// 기밀 정보 문자열
	
	/// 생성자
	constructor(string _secret) public{
		secret = _secret;
	}
	
	/// 기밀 정보 문자열 설정
	function setSecret(string _secret) public {
		secret = _secret;
	}
}
```

거래의 Transaction 해시값 확인하기
> 계약 생성자의 인자로 'himitsu'문자열 지정하기

생성한 거래의 input 필드 확인

```
> eth.getTransaction('0xfe8548d7a52007e6e7783c70c1d93deeb53585b2793fd044dbd648159a064dbb')
{
  blockHash: "0x3455a6c0a92da98841704289cd1ff1195d4550ca31326b544ec1bda3de7d4abb",
  blockNumber: 1453,
  from: "0x072bbcdeafff45265e6d6e05225073c4c14e7e73",
  gas: 5000000,
  gasPrice: 1000000000,
  hash: "0xfe8548d7a52007e6e7783c70c1d93deeb53585b2793fd044dbd648159a064dbb",
  input: "0x608060405234801561001057600080fd5b5060405161026938038061026983398101604052805101805161003a906000906020840190610041565b50506100dc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008257805160ff19168380011785556100af565b828001600101855582156100af579182015b828111156100af578251825591602001919060010190610094565b506100bb9291506100bf565b5090565b6100d991905b808211156100bb57600081556001016100c5565b90565b61017e806100eb6000396000f3006080604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637ed6c9268114610045575b600080fd5b34801561005157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261009e9436949293602493928401919081908401838280828437509497506100a09650505050505050565b005b80516100b39060009060208401906100b7565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f857805160ff1916838001178555610125565b82800160010185558215610125579182015b8281111561012557825182559160200191906001019061010a565b50610131929150610135565b5090565b61014f91905b80821115610131576000815560010161013b565b905600a165627a7a7230582003f8c6bc1aed28dc78429ce29f3be0744b90b543c70ee0bc71cb654d7964ed3200290000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000768696d6974737500000000000000000000000000000000000000000000000000",
  nonce: 5,
  r: "0xe0f0c0e3616846c51cc098739371cc0417c7fac3c4c88e66480b6a6622d69dbc",
  s: "0x11c5842a6346d628d2b56610648d87e9efb1e1ad0f742ad863f5d2a5ed7ca2cd",
  to: null,
  transactionIndex: 0,
  v: "0x78",
  value: 0
}

> web3.toAscii("0x68696d69747375");
"himitsu"

> web3.toAscii("0x68696d69747375");
"himitsu"


```

이어서 Secret 함수 호출하기 (미스티 월렛에서 호출했다고 가정하고 트렌젝션 해쉬값만 얻어 온다)

```
> eth.getTransaction('0xa20fed51f282fea8044e21586287a7f5739b194ac0551cb4b8240e9917a1cd6f')
{
  blockHash: "0x7f01814ec1ac3d2dc7c8852df04fd00637b9fb29f2635243b9fe3b21c3e29adc",
  blockNumber: 2054,
  from: "0x072bbcdeafff45265e6d6e05225073c4c14e7e73",
  gas: 5000000,
  gasPrice: 1000000000,
  hash: "0xa20fed51f282fea8044e21586287a7f5739b194ac0551cb4b8240e9917a1cd6f",
  input: "0x7ed6c926000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000066e616973796f0000000000000000000000000000000000000000000000000000",
  nonce: 6,
  r: "0x77a7bbcd94f7357fe8f71579fd62d7fe0e2d4cbb408c68aaa651cf2c826405bb",
  s: "0x990b142188419a865e8cadf761dc885c851f463be6495fd24df03192b907fca",
  to: "0xca37b661b4c838eeefdce033ab459aa0951c9b82",
  transactionIndex: 0,
  v: "0x78",
  value: 0
}

> web3.toAscii("0x6e616973796f");
"naisyo"

0x
7ed6c926( Method ID : setSecret )
0000000000000000000000000000000000000000000000000000000000000020 (32byte offset)
0000000000000000000000000000000000000000000000000000000000000006 (parameter length:6)
6e616973796f0000000000000000000000000000000000000000000000000000 ("naisyo")

> web3.sha3("setSecret(string)").substr(2,8)
"7ed6c926"
```
